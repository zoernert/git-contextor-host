name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: --health-cmd "mongo --eval 'db.stats().ok'" --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: tunnel-service/package-lock.json

    - name: Install dependencies
      run: |
        cd tunnel-service
        npm ci

    - name: Create logs directory
      run: mkdir -p tunnel-service/logs

    - name: Run linting
      run: |
        cd tunnel-service
        npm run lint || true

    - name: Run tests
      run: |
        cd tunnel-service
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/tunnel-service-test
        JWT_SECRET: test-secret-key-for-ci
        STRIPE_SECRET_KEY: sk_test_fake_key_for_testing
        STRIPE_WEBHOOK_SECRET: whsec_fake_webhook_secret

    - name: Generate test coverage
      run: |
        cd tunnel-service
        npm run test:coverage || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./tunnel-service/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd tunnel-service
        npm ci

    - name: Run security audit
      run: |
        cd tunnel-service
        npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=tunnel-service/package.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v4
      with:
        context: ./tunnel-service
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        
        # Add actual deployment commands here
        # For example, using kubectl, helm, or API calls to your deployment platform

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "Image: ${{ needs.build.outputs.image }}"
        echo "Digest: ${{ needs.build.outputs.digest }}"
        
        # Add actual deployment commands here
        # This should include health checks and rollback capabilities

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()

    steps:
    - name: Clean up old container images
      run: |
        echo "Cleaning up old container images"
        # Add cleanup commands to remove old images and free up space
