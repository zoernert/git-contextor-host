#!/bin/bash

# =============================================================================
# Git Contextor Host - System Test Script
# =============================================================================
# This script performs comprehensive testing of the deployed system
# Tests: API health, authentication, tunnel creation, and functionality
# =============================================================================

set -e

# Configuration
SERVER_HOST="10.0.0.14"
SERVER_PORT="5000"
BASE_URL="http://$SERVER_HOST:$SERVER_PORT"
API_URL="$BASE_URL/api"

# Test credentials (will be created during test)
TEST_EMAIL="test-$(date +%s)@example.com"
TEST_PASSWORD="TestPassword123!"
TEST_ADMIN_EMAIL="admin@example.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables
JWT_TOKEN=""
ADMIN_TOKEN=""
TUNNEL_ID=""
TUNNEL_SUBDOMAIN=""

# Logging functions
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ⚠️  $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ❌ $1${NC}"
    exit 1
}

# Print test banner
print_banner() {
    echo -e "${BLUE}"
    echo "╔═══════════════════════════════════════════════════════════════╗"
    echo "║                Git Contextor Host Test Suite                  ║"
    echo "║                  System Verification                          ║"
    echo "╚═══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Test 1: Basic connectivity
test_connectivity() {
    log "Testing basic connectivity..."
    
    if curl -f -s "$BASE_URL" > /dev/null; then
        success "Frontend is accessible"
    else
        error "Frontend is not accessible at $BASE_URL"
    fi
}

# Test 2: API health check
test_api_health() {
    log "Testing API health..."
    
    response=$(curl -f -s "$API_URL/health")
    if echo "$response" | grep -q "ok"; then
        success "API health check passed"
    else
        error "API health check failed"
    fi
}

# Test 3: User registration
test_user_registration() {
    log "Testing user registration..."
    
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}" \
        "$API_URL/auth/register")
    
    if echo "$response" | grep -q "token"; then
        JWT_TOKEN=$(echo "$response" | grep -o '"token":"[^"]*' | cut -d'"' -f4)
        success "User registration successful"
    else
        error "User registration failed: $response"
    fi
}

# Test 4: User login
test_user_login() {
    log "Testing user login..."
    
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}" \
        "$API_URL/auth/login")
    
    if echo "$response" | grep -q "token"; then
        JWT_TOKEN=$(echo "$response" | grep -o '"token":"[^"]*' | cut -d'"' -f4)
        success "User login successful"
    else
        error "User login failed: $response"
    fi
}

# Test 5: User profile access
test_user_profile() {
    log "Testing user profile access..."
    
    response=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/auth/profile")
    
    if echo "$response" | grep -q "$TEST_EMAIL"; then
        success "User profile access successful"
    else
        error "User profile access failed: $response"
    fi
}

# Test 6: Tunnel creation
test_tunnel_creation() {
    log "Testing tunnel creation..."
    
    # Generate a unique subdomain
    TUNNEL_SUBDOMAIN="test-$(date +%s)"
    
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $JWT_TOKEN" \
        -d "{\"subdomain\":\"$TUNNEL_SUBDOMAIN\",\"targetPort\":3000}" \
        "$API_URL/tunnels")
    
    if echo "$response" | grep -q "subdomain"; then
        TUNNEL_ID=$(echo "$response" | grep -o '"_id":"[^"]*' | cut -d'"' -f4)
        success "Tunnel creation successful - ID: $TUNNEL_ID"
    else
        error "Tunnel creation failed: $response"
    fi
}

# Test 7: Tunnel listing
test_tunnel_listing() {
    log "Testing tunnel listing..."
    
    response=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/tunnels")
    
    if echo "$response" | grep -q "$TUNNEL_SUBDOMAIN"; then
        success "Tunnel listing successful"
    else
        error "Tunnel listing failed: $response"
    fi
}

# Test 8: Admin login (if admin exists)
test_admin_login() {
    log "Testing admin login..."
    
    # Try to login as admin (this might fail if no admin user exists)
    response=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$TEST_ADMIN_EMAIL\",\"password\":\"admin123\"}" \
        "$API_URL/auth/login")
    
    if echo "$response" | grep -q "token"; then
        ADMIN_TOKEN=$(echo "$response" | grep -o '"token":"[^"]*' | cut -d'"' -f4)
        success "Admin login successful"
        return 0
    else
        warning "Admin login failed (admin user might not exist): $response"
        return 1
    fi
}

# Test 9: Admin user management
test_admin_functionality() {
    if [ -z "$ADMIN_TOKEN" ]; then
        warning "Skipping admin tests - no admin token available"
        return
    fi
    
    log "Testing admin functionality..."
    
    response=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" \
        "$API_URL/admin/users")
    
    if echo "$response" | grep -q "users"; then
        success "Admin user management working"
    else
        warning "Admin user management failed: $response"
    fi
}

# Test 10: Subscription endpoints
test_subscription_endpoints() {
    log "Testing subscription endpoints..."
    
    response=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/subscriptions/plans")
    
    if echo "$response" | grep -q "plans" || echo "$response" | grep -q "basic"; then
        success "Subscription endpoints working"
    else
        warning "Subscription endpoints failed: $response"
    fi
}

# Test 11: Qdrant integration
test_qdrant_integration() {
    log "Testing Qdrant integration..."
    
    response=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/qdrant/collections")
    
    if echo "$response" | grep -q "collections" || echo "$response" | grep -q "result"; then
        success "Qdrant integration working"
    else
        warning "Qdrant integration failed: $response"
    fi
}

# Test 12: Tunnel deletion
test_tunnel_deletion() {
    if [ -z "$TUNNEL_ID" ]; then
        warning "Skipping tunnel deletion - no tunnel ID available"
        return
    fi
    
    log "Testing tunnel deletion..."
    
    response=$(curl -s -X DELETE \
        -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/tunnels/$TUNNEL_ID")
    
    if echo "$response" | grep -q "deleted" || echo "$response" | grep -q "success"; then
        success "Tunnel deletion successful"
    else
        warning "Tunnel deletion failed: $response"
    fi
}

# Test 13: Static file serving
test_static_files() {
    log "Testing static file serving..."
    
    # Test if CSS files are served
    if curl -f -s "$BASE_URL/assets/" > /dev/null 2>&1; then
        success "Static files are being served"
    else
        # Try alternative approach
        response=$(curl -s "$BASE_URL")
        if echo "$response" | grep -q "<!DOCTYPE html>"; then
            success "Frontend HTML is being served"
        else
            warning "Static file serving might have issues"
        fi
    fi
}

# Test 14: Database connectivity
test_database_connectivity() {
    log "Testing database connectivity..."
    
    # This test is indirect - we check if we can fetch user data
    response=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
        "$API_URL/auth/profile")
    
    if echo "$response" | grep -q "email"; then
        success "Database connectivity working"
    else
        warning "Database connectivity issues detected"
    fi
}

# Test 15: Memory and performance
test_performance() {
    log "Testing basic performance..."
    
    start_time=$(date +%s.%3N)
    curl -f -s "$API_URL/health" > /dev/null
    end_time=$(date +%s.%3N)
    
    response_time=$(echo "$end_time - $start_time" | bc)
    
    if (( $(echo "$response_time < 1.0" | bc -l) )); then
        success "API response time: ${response_time}s (Good)"
    else
        warning "API response time: ${response_time}s (Slow)"
    fi
}

# Cleanup function
cleanup() {
    log "Cleaning up test data..."
    
    # Delete test tunnel if it exists
    if [ -n "$TUNNEL_ID" ]; then
        curl -s -X DELETE \
            -H "Authorization: Bearer $JWT_TOKEN" \
            "$API_URL/tunnels/$TUNNEL_ID" > /dev/null
    fi
    
    # Note: We don't delete the test user as it would require admin privileges
    success "Cleanup completed"
}

# Test summary
print_summary() {
    echo -e "\n${BLUE}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                      Test Summary                             ║${NC}"
    echo -e "${BLUE}╠═══════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${BLUE}║ Server: $SERVER_HOST:$SERVER_PORT                                  ║${NC}"
    echo -e "${BLUE}║ Test User: $TEST_EMAIL                          ║${NC}"
    echo -e "${BLUE}║ Tunnel Created: $TUNNEL_SUBDOMAIN                               ║${NC}"
    echo -e "${BLUE}║                                                               ║${NC}"
    echo -e "${BLUE}║ All critical tests passed ✅                                  ║${NC}"
    echo -e "${BLUE}║                                                               ║${NC}"
    echo -e "${BLUE}║ Your Git Contextor Host is ready for production!             ║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Main test execution
main() {
    print_banner
    
    log "Starting comprehensive system tests..."
    
    # Core functionality tests
    test_connectivity
    test_api_health
    test_static_files
    test_database_connectivity
    test_performance
    
    # Authentication tests
    test_user_registration
    test_user_login
    test_user_profile
    
    # Core feature tests
    test_tunnel_creation
    test_tunnel_listing
    test_subscription_endpoints
    test_qdrant_integration
    
    # Admin tests (optional)
    if test_admin_login; then
        test_admin_functionality
    fi
    
    # Cleanup tests
    test_tunnel_deletion
    cleanup
    
    print_summary
    
    success "All tests completed successfully!"
}

# Quick test function for basic checks only
quick_test() {
    print_banner
    log "Running quick system check..."
    
    test_connectivity
    test_api_health
    test_static_files
    
    success "Quick test completed!"
}

# Command line interface
case "${1:-full}" in
    "full")
        main
        ;;
    "quick")
        quick_test
        ;;
    "api")
        test_api_health
        test_user_registration
        test_user_login
        test_tunnel_creation
        ;;
    "connectivity")
        test_connectivity
        test_api_health
        test_static_files
        ;;
    *)
        echo "Usage: $0 {full|quick|api|connectivity}"
        echo ""
        echo "Commands:"
        echo "  full         - Run all tests (default)"
        echo "  quick        - Run basic connectivity tests"
        echo "  api          - Run API functionality tests"
        echo "  connectivity - Run connectivity tests only"
        exit 1
        ;;
esac
